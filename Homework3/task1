#include <iostream>
#include <omp.h>

double f(double x)
{
    return 1 / (1 + x * x);
}

double integr(double a, double b, double (*f)(double x))
{
    double n = (b - a) / 10;
    double sum = 0;
    for (int i = 0; i < 10; ++i)
    {
        sum += f(a + n * i) * n;
    }
    return sum;
}

double integral(double a, double b, double (*f)(double x))
{
    double part12 = integr(a, b, f);
    double part1 = integr(a, (a + b) / 2, f);
    double part2 = integr((a + b) / 2, b, f);
    double delta = abs(part12 - (part1 + part2));
    if (delta < 0.0000000001)
    {
        return part12;
    }
    else
    {
#pragma omp parallel
        {
#pragma omp single
            {
#pragma omp task
                {
                    part1 = integral(a, (a + b) / 2, f);
                }
#pragma omp task
                {
                    part2 = integral((a + b) / 2, b, f);
                }
            }
        }
        return part1 + part2;
    }
}

int main()
{
    std::cout << 4 * integral(0, 1, f);

    return EXIT_SUCCESS;
}
